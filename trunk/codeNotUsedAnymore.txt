    /**
     * Erstellt einen Anbieter.
     * 
     * @param provider
     *            Der zu erstellende Anbieter
     * @return Der erstellte Anbieter
     */
    protected abstract AbstractProvider createProvider(AbstractProvider provider);

    /**
     * Bearbeitet einen Anbieter.
     * 
     * @param provider
     *            Der zu bearbeitende Anbieter
     * @return Der bearbeitete Anbieter
     */
    protected abstract AbstractProvider updateProvider(AbstractProvider provider);

    /**
     * Löscht einen Anbieter.
     * 
     * @param provider
     *            Der zu löschende Anbieter
     */
    protected abstract void deleteProvider(AbstractProvider provider);
    
    
    
                // Sucht alle Anbieter, die die Zutat vorrätig haben
            Set<AbstractProvider> providersWithIngredient = providerBase.findProvidersByIngredient(entry.getKey());

            // Ein Anbieter hat die Zutat vorrätig
            if (providersWithIngredient.size() == 1) {

                AbstractProvider provider = providersWithIngredient.iterator().next();

                // Überprüfen ob Anbieter die Zutat in gewünschter Menge hat
                if (provider.hasIngredientWithQuantity(entry.getKey(), entry.getValue())) {
                    // Wenn Anbieter die Zutat in gewünschter Menge vorrätig hat, muss diese unabhängig vom Preis bei
                    // ihm gekauft werden, da er der einzige Anbieter der Zutat ist
                    addIngredientAndQuantity(result, provider, entry.getKey(), entry.getValue());
                }
            }
            // Mehrere Anbieter haben die Zutat vorrätig
            else if (providersWithIngredient.size() > 1) {
      
                IngredientQuantity ingredientQuantity = new IngredientQuantity(entry.getKey(), entry.getValue());

                if (test.containsKey(ingredientQuantity)) {
                    test.get(ingredientQuantity).addAll(providersWithIngredient);
                }
                else {
                    test.put(ingredientQuantity, providersWithIngredient);
                }
            }
            
            
                  if (test != null && !test.isEmpty()) {

            for (Entry<IngredientQuantity, Set<AbstractProvider>> entry : test.entrySet()) {

                System.out.println(entry.getKey());
                System.out.println(entry.getValue());
            }

        }
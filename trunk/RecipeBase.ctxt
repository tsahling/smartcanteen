#BlueJ class context
comment0.params=
comment0.target=RecipeBase()
comment0.text=\r\n\ Konstruktor\ der\ Klasse\ Recipebase\r\n\ \ \r\n
comment1.params=recipe
comment1.target=Recipe\ addRecipe(Recipe)
comment1.text=\r\n\ Mithilfe\ der\ Methode\ addRecipe()\ kann\ ein\ neues\ Rezept\ in\ die\ Datenstrukt\ recipes\ hinzugef\u00FCgt\ werden\r\n\ @return\ Die\ aktualisierte\ Datenstruktur\ recipes\ wird\ zur\u00FCckgeben\r\n
comment10.params=
comment10.target=java.util.Set\ getRecipes()
comment10.text=\r\n\ @return\ the\ recipes\r\n
comment11.params=recipes
comment11.target=void\ setRecipes(java.util.Set)
comment11.text=\r\n\ Sets\ the\ recipes.\r\n\ \r\n\ @param\ recipes\ the\ recipes\ to\ set\r\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\r\n\ Erstellt\ die\ String-Representation\ des\ Objekts\ {@link\ RecipeBase}.\r\n\ \r\n\ @return\ Die\ String-Representation\ von\ {@link\ RecipeBase}\r\n
comment2.params=recipe
comment2.target=Recipe\ updateRecipe(Recipe)
comment2.text=\r\n\ Mithilfe\ der\ Methode\ updateRecipe()\ kann\ ein\ bestehendes\ Rezept\ in\ die\ Datenstrukt\ recipes\ ver\u00E4ndert\ werden\r\n\ @return\ Die\ aktualisierte\ Datenstruktur\ recipes\ wird\ zur\u00FCckgeben\r\n
comment3.params=recipe
comment3.target=void\ removeRecipe(Recipe)
comment3.text=\r\n\ Mithilfe\ der\ Methode\ removeRecipe()\ kann\ ein\ bestehendes\ Rezept\ in\ der\ Datenstrukt\ recipes\ gel\u00F6scht\ werden\r\n
comment4.params=name
comment4.target=Recipe\ findRecipeByName(java.lang.String)
comment4.text=\r\n\ Mithilfe\ der\ Methode\ findRecipeByName()\ kann\ ein\ bestimmtes\ Rezept\ in\ der\ Datenstrukt\ recipes\ gesucht\ werden\r\n\ @param\ Name\ des\ Rezept\r\n\ @return\ Das\ gefundene\ Rezept\ wird\ zur\u00FCckgeben\r\n
comment5.params=recipeType
comment5.target=java.util.Set\ findRecipesByRecipeType(RecipeType)
comment5.text=\r\n\ Mithilfe\ der\ Methode\ findRecipesByRecipeType()\ k\u00F6nnen\ Rezept\ anhand\ ihres\ \r\n\ RecipeType\ (Fleisch,\ Fisch,\ Vegetarisch)\ in\ der\ Datenstrukt\ recipes\ gesucht\ werden\r\n\ @param\ recipeType\ ((Fleisch,\ Fisch,\ Vegetarisch))\r\n\ @return\ Collection\ die\ den\ Inhalt\ der\ Rezepte\ welche\ auf\ den\ recipeType\ passen\ wird\ zur\u00FCckgegeben\r\n
comment6.params=
comment6.target=java.util.Set\ getRecipesSortedByRank()
comment6.text=\r\n\ Mithilfe\ der\ Methode\ getRecipesSortedByRank()\ k\u00F6nnen\ die\ Rezepte\ anhand\ des\ Rang\ der\ Gerichte\ \ \r\n\ Hitliste\ sortiert\ werden\r\n\ @return\ Collection\ welche\ die\ Rezepte\ der\ Gerichte\ nach\ ihrem\ Rang\ in\ der\ Hitliste\ aufsteigen\ sortiert\ enth\u00E4lt\ wird\ zur\u00FCckgegeben\r\n
comment7.params=rank
comment7.target=Recipe\ findRecipeByRank(int)
comment7.text=\r\n\ Mithilfe\ der\ Methode\ findRecipeByRank()\ kann\ ein\ bestimmtes\ Rezept\ eines\ Gericht\ anhand\ des\ Rang\ in\ der\ Hitliste\ gefunden\ werden.\r\n\ @param\ Rang\ des\ Gericht\ in\ der\ Hitliste\r\n\ @return\ Recipe\ welches\ zu\ dem\ Gericht\ geh\u00F6rt\ welches\ den\ \u00FCbergebenden\ Rang\ in\ der\ Hitliste\ besitzt\r\n
comment8.params=
comment8.target=Recipe\ findHighestRankRecipe()
comment8.text=\r\n\ Mithilfe\ der\ Methode\ findHighestRankRecipe()\ kann\ das\ Rezept\ des\ beliebstesten\ Gericht\ der\ Hitliste\ gefunden\ werden\r\n\ @return\ Recipe\ welches\ zum\ Gericht\ mit\ dem\ beliebtesten\ Gericht\ in\ der\ Hitliste\ geh\u00F6rt\r\n
comment9.params=
comment9.target=Recipe\ findLowestRankRecipe()
comment9.text=\r\n\ Mithilfe\ der\ Methode\ findLowestRankRecipe()\ kann\ das\ Rezept\ des\ unbeliebstesten\ Gericht\ der\ Hitliste\ gefunden\ werden\r\n\ @return\ Recipe\ welches\ zum\ Gericht\ mit\ dem\ unbeliebtesten\ Gericht\ in\ der\ Hitliste\ geh\u00F6rt\r\n
numComments=13
